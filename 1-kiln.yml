---
# Enable captive portal:
captive_portal:

# Enable webserver
web_server:
  port: 80
  # css_url: https://kiln-controller.s3.eu-central-1.amazonaws.com/style.css
  # js_url: https://kiln-controller.s3.eu-central-1.amazonaws.com/index.js

# Enable ota
ota:
  password: !secret ota_password

# Enable logging
logger:
  level: DEBUG

# Enable status led on onboard led
status_led:
  pin:
    number: GPIO2
    inverted: True

# Enable wifi with static ip
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true
  manual_ip:
    static_ip: 192.168.1.30
    gateway: 192.168.1.1
    subnet: 255.255.255.0
    # needed for ntp timesync
    dns1: 192.168.1.1

# Esphome setup
esphome:
  name: glas-kiln
  platform: ESP8266
  board: d1_mini
  # based on this https://community.platformio.org/t/which-c-standard-am-i-using/24597/4
  # get higher c++ standard, mostly for std::to_array
  platformio_options:
    build_flags:
      - -std=gnu++20
    build_unflags:
      - -std=gnu++17

# Modules setup
spi:
  miso_pin: D1
  clk_pin: D3

# Setup API
kiln_api:

external_components:
  - source:
      type: local
      path: components/

# Kiln
output:
  - platform: slow_pwm
    id: heater
    period: 60s
    pin: D5

sensor:
  # - platform: max6675
  #   name: Kiln Temperature
  #   id: kiln_temperature
  #   cs_pin: D2
  #   update_interval: 1s
  # NOTE: just for testing
  - platform: template
    name: Kiln Temperature
    id: kiln_temperature
    update_interval: 10s
    lambda: |-
      return id(kiln).target_temperature;

climate:
  - platform: pid
    id: kiln  # is referenced in kiln_api, keep this
    name: Kiln
    sensor: kiln_temperature
    default_target_temperature: "0"
    visual:
      min_temperature: 0
      max_temperature: 1500
      temperature_step: 0.1
    heat_output: heater
    # TODO: needs tuning
    deadband_parameters:
      threshold_high: 10°C
      threshold_low: 10°C
    control_parameters:
      kp: 0.0
      ki: 0.0
      kd: 0.0

button:
  - platform: template
    name: Kiln Autotune
    on_press:
      - climate.pid.autotune: kiln

# id(started_at) = id(my_time).utcnow().timestamp;
# # Debug
# text_sensor:
#   - platform: template
#     id: text_schedule_name
#     name: "Schedule name"
#     lambda: |-
#       return schedule_name;
#   - platform: template
#     id: text_schedule
#     name: "Schedule"
#     update_interval: never
#   - platform: template
#     id: text_current_step
#     name: "Current step"
#     lambda: |-
#       int i = current_step;
#       std::string ret;
#       ESP_LOGD("text_current_step", "current_step index: %i", i);
#       if (not schedule.empty()) {
#         for (auto & v : schedule[i]) {
#           ret.append(std::to_string(v));
#           ret.append(",");
#         }
#       }
#       return ret;
#     update_interval: 10s
